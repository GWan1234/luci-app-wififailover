#!/bin/sh

DEBUG='0'
CONFIG_FILE="/etc/config/wififailover"
CONFIG_NAME="wififailover"
LOG_FILE="/var/log/wifi_failover.log"

# Глобальная переменная для хранения индекса STA-интерфейса. Определяется при запуске.
STA_IFACE_INDEX=""

log() {
    # Логирование сообщений в файл, syslog и консоль
    local message="$1"

    if [ "$DEBUG" = "1" ]; then
        echo "WIFI_Failover: $message"
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" >> "$LOG_FILE"
    fi
    logger -t WIFI_Failover "$message"
}

find_sta_iface_index() {
    # Находит индекс wifi-iface с режимом sta (клиентский режим)

    local index=0
    while uci -q get wireless.@wifi-iface[$index] >/dev/null; do
        if [ "$(uci -q get wireless.@wifi-iface[$index].mode)" = "sta" ]; then
            STA_IFACE_INDEX=$index
            return 0
        fi
        index=$((index + 1))
    done
    log "Клиентский Wi-Fi интерфейс (sta) не найден."
    return 1
}

init_cnf() {
    # Инициализация конфигурационного файла, если он отсутствует
    if [ ! -f "$CONFIG_FILE" ]; then
        log "Конфигурационный файл не найден. Создание файла по умолчанию: $CONFIG_FILE"
        cat > "$CONFIG_FILE" <<EOF
config wifi 'settings'
    option enable '1'
    option current_idx '0'
    option check_interval '30'
    option ping_target '8.8.8.8'
    option check_quality '1'
    option ping_count '20'
    option max_packet_loss '30'
    option max_duplicates '30'
EOF
    fi
}

check_internet() {
    # Проверка доступности интернета через ping
    local target=$(uci -q get "$CONFIG_NAME.settings.ping_target")
    if ping -c 2 -W 3 "${target:-8.8.8.8}" >/dev/null 2>&1; then
        return 0  # Интернет есть
    else
        return 1  # Интернета нет
    fi
}


check_connection_quality() {
    local target
    target=$(uci -q get "$CONFIG_NAME.settings.ping_target")
    target="${target:-8.8.8.8}"

    # Увеличим количество пакетов для лучшей статистики
    local ping_count=$(uci -q get "$CONFIG_NAME.settings.ping_count")
    ping_count="${ping_count:-20}"

    # Максимально допустимые потери пакетов в %
    local max_packet_loss=$(uci -q get "$CONFIG_NAME.settings.max_packet_loss")
    max_packet_loss="${max_packet_loss:-20}"

    # Максимально допустимые дубликаты в %
    local max_duplicates=$(uci -q get "$CONFIG_NAME.settings.max_duplicates")
    max_duplicates="${max_duplicates:-20}"

    # Выполняем ping и получаем полную статистику
    local ping_output=$(ping -c "$ping_count" -q "$target" 2>&1)

    # Более надежное извлечение packet loss (только число)
    local packet_loss=$(echo "$ping_output" | grep -o '[0-9]\+% packet loss' | cut -d'%' -f1)
    packet_loss=${packet_loss:-100}  # Если не найдено, считаем 100% потерь

    # Более надежное извлечение duplicates (только число)
    local duplicates=$(echo "$ping_output" | grep -o '[0-9]\+ duplicates' | cut -d' ' -f1)
    duplicates=${duplicates:-0}  # Если не найдено, считаем 0 дубликатов

    if [ "$packet_loss" -gt 99 ]; then
        log "Ошибка: не удалось выполнить ping"
        return 1
    fi

    if [ "$packet_loss" -gt "$max_packet_loss" ]; then
        log "Проблема: высокая потеря пакетов (${packet_loss}% > ${max_packet_loss}%)"
        return 1
    fi

    if [ "$duplicates" -gt "$max_duplicates" ]; then
        log "Проблема: много дублирующихся пакетов (${duplicates}% > ${max_duplicates}%)"
        return 1
    fi

    return 0
}


get_current_index(){
    # Получение текущего индекса WiFi-конфигурации
    local current_idx

    current_idx=$(uci -q get "$CONFIG_NAME.settings.current_idx")
    current_idx="${current_idx:-0}"
    echo "$current_idx"
}

set_current_index(){
    # Установка текущего индекса WiFi-конфигурации
    local index=$1

    uci set "$CONFIG_NAME.settings.current_idx=$index"
}

check_exist_wifi_conf(){
    # Проверка наличия WiFi-конфигурации по индексу
    local index=$1

    if uci -q get "$CONFIG_NAME.@wifi_network[$index]" >/dev/null; then
        return 0  # настройка есть
    else
        return 1  # настройки нет
    fi
}

get_next_index(){
    # Получение следующего индекса WiFi-конфигурации.
    # Если следующего нет, возвращается 0 (циклическое переключение).
    local current_idx
    local next_idx

    current_idx=$(get_current_index)
    next_idx=$((current_idx + 1))

    if check_exist_wifi_conf "$next_idx"; then
        echo "$next_idx"
    else
        echo "0"
    fi
}

switch_wifi(){
    # Переключение на следующую WiFi-сеть из конфигурации
    local next_index
    local ssid bssid key encryption

    next_index=$(get_next_index)
    if ! check_exist_wifi_conf "$next_index"; then
        log "Резервные WiFi конфиги не найдены. Некуда переключаться."
        return 1
    fi

    # Безопасно получаем параметры, избегая eval
    ssid=$(uci -q get "$CONFIG_NAME.@wifi_network[$next_index].ssid")
    bssid=$(uci -q get "$CONFIG_NAME.@wifi_network[$next_index].bssid")
    key=$(uci -q get "$CONFIG_NAME.@wifi_network[$next_index].key")
    encryption=$(uci -q get "$CONFIG_NAME.@wifi_network[$next_index].encryption")

    log "Переключаемся на WiFi: '$ssid' (индекс $next_index)"

    # Обновляем индекс в конфиге, чтобы при следующем сбое перейти к следующей сети
    set_current_index "$next_index"
    uci commit "$CONFIG_NAME"

    uci set wireless.@wifi-iface["$STA_IFACE_INDEX"].ssid="$ssid"
    uci set wireless.@wifi-iface["$STA_IFACE_INDEX"].bssid="$bssid"
    uci set wireless.@wifi-iface["$STA_IFACE_INDEX"].key="$key"
    uci set wireless.@wifi-iface["$STA_IFACE_INDEX"].encryption="$encryption"
    uci commit wireless

    log "Перезапуск Wi-Fi интерфейса..."
    wifi down
    sleep 2
    wifi up
    sleep 10
    return 0
}

monitoring(){
    # Основной цикл мониторинга доступности интернета и переключения WiFi
    while true; do
        local is_enable=$(uci -q get "$CONFIG_NAME.settings.enable")
        is_enable="${is_enable:-0}"

        if [ "$is_enable" -eq 1 ]; then
            local needs_switch=0
            local check_quality_enabled=$(uci -q get "$CONFIG_NAME.settings.check_quality")

            if ! check_internet; then
                log "Интернет недоступен."
                needs_switch=1
            elif [ "$check_quality_enabled" = "1" ] && ! check_connection_quality; then
                log "Плохое качество соединения."
                needs_switch=1
            fi

            if [ "$needs_switch" -eq 1 ]; then
                log "Требуется переключение WiFi."
                switch_wifi
            fi
        fi
        # Пауза должна быть вне условия, чтобы избежать бесконечного цикла, когда демон отключен
        local interval=$(uci -q get "$CONFIG_NAME.settings.check_interval")
        sleep "${interval:-30}"
    done
}


main(){
    # Точка входа: инициализация и запуск мониторинга
    if find_sta_iface_index; then
        log "Запуск демона. Клиентский интерфейс найден: $STA_IFACE_INDEX"
        init_cnf
        monitoring
    else
        exit 1
    fi
}

main
